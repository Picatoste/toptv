<xml>
<solucion>
	 <id>1</id>
	 <titulo>Solución 1 - JQuery - función find()</titulo>
	 <autor>David Benito Ramírez</autor>
	 <url_public>http://solucionesdbr.es/pages/solucion-1-jquery-funcion-find.html</url_public>
	 <fecha>20110908</fecha>		 
	<header>Una herramienta muy útil para añadir efectos ópticos y navegar entre tags HTML es el framework de Javascript Jquery. Tras añadir la referencia js a tu proyecto podrás utilizar esta potente herramienta que facilita el trabajo a la hora de bregar con el "duro" javascript. Una de las funciones que he descubrido recientemiente es el metodo find().</header>
	<imagen>img/jquery_solucion1.png</imagen>
	<section>
		<![CDATA[
			<p>
				Link: <a href='http://api.jquery.com/find/'>http://api.jquery.com/find/</a>
			</p>
			<pre class="brush: js;">/** "Abstract Builder" */
			<p>
			   <span id="primero" />
			   <a>
				  <span id="segundo" />
			   </a>
			   <strong><span id="tercero" data-item="megusta" /></strong>
			</p>
			</pre>
			<p>
				Esta función nos devuelve todos los tags descendientes que hemos puesto como parámetro de entrada, respetando la jerarquía de forma descendiente:
			</p>
			<pre class="brush: js;">/** "Abstract Builder" */
				$('p').find('span') //Nos devolvería todos los elementos 'span' contenidos en el tag 'p'. En el ejemplo los dos span ("primero" y "segundo").
				$('p').find('a span ') //Nos devolvería todos los elementos 'span' contenidos en el tag 'a' y a su vez en el tag 'p'. En el ejemplo en el span "segundo"-.
			</pre>
			<p>
			También se pueden añadir criterios de búsqueda, como por ejemplo:
			</p>
			<pre class="brush: js;">/** "Abstract Builder" */
				$('p').find('span[class="megusta"]') //Nos devolvería el span "tercero".
			</pre>
			
		]]>
	</section>	 
	<footer>
	<![CDATA[
		JQuery, a día de hoy, es framework Javascript más popular y con más adeptos en la programación web.
		]]>
	</footer>
</solucion>
<solucion>
	 <id>2</id>
	 <titulo> 
		Solución 2 - ToHtml.com - Códigos en blogs
	</titulo>
	 <autor> 
	    David Benito Ramírez
	</autor>
	 <url_public>http://solucionesdbr.es/pages/solucion-2-tohtml-codigo-en-blogs.html</url_public>
	 <fecha>
		20110909
	</fecha>		 
	<header>
		Herramienta muy útil y sencilla para dar estilos de código a los textos. Convierte texto plano de un lenguaje de programación a HTML, identandolo y simulando al formato que tendríamos en un IDE. Permite escoger entre una serie de estilos generales dependiendo el color de fondo y detecta un montón de lenguajes de programación de forma automática y manual:
	</header>
	<imagen>
		img/highlighter_solucion2.jpg
	</imagen>
	 <section>
		<![CDATA[
			<p>
				Link: <a href='http://tohtml.com/'> http://tohtml.com/ </a>
			</p>
			<p>
			<img align="middle" border="0" height="156" src="img/tohmtl_screenshot.png" width="400">
			</p>
		]]>
	</section>		 
	<footer>
		<![CDATA[
			Existen muchos más resaltadores de codigo para web. Incluso existen projectos en diferente lenguajes adaptados para la integración en códido, consiguiendo una forma sólida para conseguir el efecto "codigo de IDE".
		]]>
	</footer>
</solucion>
<solucion>
	 <id>3</id>
	 <titulo>Solución 3 - Invocar función de servidor (CSharp) desde cliente (JavaScript)</titulo>
	 <autor>David Benito Ramírez</autor>
	 <url_public>http://solucionesdbr.es/pages/solucion-3-invocar-funcion-servidor-desde-cliente.html</url_public>
	 <fecha>20110911</fecha>		 
	 <header>Tenia que realizar un div pop-up de confirmación para eliminar un producto de un carrito de compra de una aplicación web .NET. El problema venía dado porqué esta función de EliminarProducto() hacía PostBack al servidor y el pop-up tenía que estar hecho en JQuery (Javascript). Ejecución en Cliente y ejecución en Servidor no son buenos compañeros.Aún tengo que comprobar que sea compatible en todos los navegadores.</header>
	<imagen>img/dopostback.png</imagen>
	 <section>
		<![CDATA[
		<p>
		Hoy me he pelado durante 2 horas con este problema, pero al fin lo saque:
		Hay varias soluciones, pero me centro en la que he aplicado,(sospecho que..) la más insegura.
		</p>
		<p>
		La solución se hallaba en la instrucción oculta javacript que permite los PostBacks del .NET. He tenido que parar la ejecución, realizar el pop-up confirmación Jquery, y luego proseguir (si tocaba) la ejecución donde lo había dejado, en el PostBack.
		</p>
		<p>
		La instrucción interna de .NET en Javascript que se debía parar era :  __doPostback('idcontrolnet', ''). 
		Lo que no me ha convencido ha sido el cómo he obtenido el  'idcontrolnet'. Lo he sacado haciendo splits del atributo "href" del LinkButton (también se puede hacer el atributo "pathname").
		</p>
		<pre class="brush: js;">
			<script type="text/javascript">
			$().ready(function () {
				$('#dialogContent').dialog({
					autoOpen: false,
					modal: true,
					bgiframe: true,
					title: "MySql Membership Config Tool",
				});
			});

			function rowAction(uniqueID) {

			$('#dialogContent').dialog('option', 'buttons',
			{
				"OK": function () {
						//uniqueID.pathname.replace("__doPostBack('", "").replace("','')", "");
					 __doPostBack((uniqueID.href).replace("javascript:__doPostBack('", "").replace("','')", ""), '');
					$(this).dialog("close"); 
					return false; 
				},
				"Cancel": function () { $(this).dialog("close"); }
			});

						$('#dialogContent').dialog('open');

						return false;
					}
	 
		</script>
			<asp:Repeater ID = "RptItems" runat = "server" onitemdatabound="RptItems_ItemDataBound" onitemcommand="RptItems_ItemCommand">
        <ItemTemplate>
            <li>
                <asp:Literal ID = "LitID" runat = "server" Visible = "false" Text = '<%# Eval("ID") %>'></asp:Literal>
                <div class="thumb">
                    <asp:Image ID = "ImgItem" runat = "server" Width = "52" Height = "42" />
                </div>
                <div class="right_col">
                    <div class="title"><asp:Literal ID = "LitNombre" runat = "server" Text = '<%# Eval("ProductoNombre") %>'></asp:Literal></div>
                    <div class="info">Qty: <asp:Literal ID = "LitCantidad" runat = "server" Text = '<%# Eval("Cantidad") %>'></asp:Literal> | Talla: <asp:Literal ID = "LitTalla" runat = "server" Text = '<%# Eval("TallaNombre") %>'></asp:Literal></div>
                    <asp:LinkButton ID = "LnkEliminar" runat = "server" OnClientClick="return rowAction(this);" CssClass = "delete" CommandArgument = '<%# Eval("ID") %>' CommandName = "borrar" ><span class="icon">&nbsp;</span>Eliminar</asp:LinkButton>
                    <div class="price"><asp:Literal ID = "LitPrecio" runat = "server" ></asp:Literal>$</div>
                </div>
            </li>
        </ItemTemplate>
    </asp:Repeater>
		</pre>
		<p>
				Fuente:<a href='http://www.integratedwebsystems.com/2009/12/using-jquery-modal-dialog-confirmation-with-an-asp-net-server-control/'>http://www.integratedwebsystems.com/2009/12/using-jquery-modal-dialog-confirmation-with-an-asp-net-server-control/</a>
			</p>
		]]>
	</section>	 
	<footer>
	<![CDATA[
	  
	]]>
	</footer>
</solucion>
<solucion>
	 <id>11</id>
	 <titulo>Solución 11 - Patron de diseño Strategy</titulo>
	 <autor>David Benito Ramírez</autor>
	 <url_public>http://solucionesdbr.es/pages/solucion-11-patron-strategy.html</url_public>
	 <fecha>20130321</fecha>		 
	<header>Lo patrones de diseño son la evolución natural y sofisticada de la programación orientada a objeto (OO), son técnicas para aprovechar al máximo el potencial de la OO. Soluciones optimas que en caso de usarlas de forma adecuada darán un valor añadido a nuestros algoritmos  facilitando en el futuro las tareas mantenimiento y extensión de la misma. Empezaremos con el patrón de diseño Strategy.</header>
	<imagen>img/strategy.jpg</imagen>
	 <section>
		<![CDATA[
<p>
 <a href="http://es.wikipedia.org/wiki/Patr%C3%B3n_de_dise%C3%B1o">Definición de wikipedia:</a>
 El patrón <strong>Estrategia</strong> (Strategy) es un <a href="http://es.wikipedia.org/wiki/Patr%C3%B3n_de_dise%C3%B1o">patrón de diseño</a> para el desarrollo de software. Se clasifica como patrón de comportamiento porque determina como se debe realizar el intercambio de mensajes entre diferentes objetos para resolver una tarea. El patrón estrategia permite mantener un conjunto de algoritmos de entre los cuales el objeto cliente puede elegir aquel que le conviene e intercambiarlo dinámicamente según sus necesidades.  
</p>
<p>
Dada una clase llamada <strong>Strategy</strong> tenemos dos clases hijas que tienen un método <strong>strategicMethod()</strong> 
cada una con diferentes implementaciones, caso claro de Polimorfismo. Después desde la clase <strong>Context</strong> podremos escoger en <strong>setStrategy()</strong> que clase hija
 y implementacion nos interesa más. Al instanciar en Context la clase hija que queramos, la <strong>ConcreteStrategy</strong> escogida,
  dispondremos de sus funcionalidades. También cabe destacar la posibilidad de cambiar cuando queramos de estrategia
   instanciando en Context otra <strong>ConcreteSrategy</strong>.
</p>
<p>
<img src="img/Strategy_Pattern.jpg"></img>
</p>
<p>
Ejemplo:
</p>
<pre class="brush: java;">
public class CreadorDibujos {
    private EstrategiaDibujo _estrategia;
    private float[] _x,_y;
 
    public CreadorDibujos() {
        // Establecer estrategia por defecto.
    }
 
    public void establecerDibujoBarras() {
        _estrategia = new EstrategiaDibujoConcreta1();
    }
 
    public void establecerDibujoLineas() {
        _estrategia = new EstrategiaDibujoConcreta2();
    }
 
    ..............
 
    public void dibuja() {
        _estrategia.dibujar(_x,_y);
    }
}
</pre>
<p>
La clase <strong>Context</strong> seria CreadorDibujos, y dependiendo si escogemos Barras o Lineas, la implementación del 
método <strong>dibuja()</strong> cambiará. Se podría por ejemplo añadir nuevas estrategias como Círculos  Cuadrados, Rombos, etc. y de manera rápida y eficiente 
con pocos cambios en el sistema creado realizar cambios consistentes.
</p>
<pre class="brush: java;">
public abstract class EstrategiaDibujo extends JFrame {
    private float[] _x,_y;
    private Color _c;
    private int _ancho,_alto;
 
    public EstrategiaDibujo() {
    }
 
    public abstract void dibujar(float[] px, float[] py);
}

public class EstrategiaDibujoConcreta1 extends EstrategiaDibujo{
        //...
        public void dibujar(float[] px, float[] py){ ... }
        //...
}


public class EstrategiaDibujoConcreta2 extends EstrategiaDibujo{
        //...
        public void dibujar(float[] px, float[] py){ ... }
        //...
}
</pre>
]]>
	</section> 
	<footer>
	<![CDATA[ 
	]]>
	</footer>
</solucion>
<solucion>
	 <id>12</id>
	 <titulo>Solución 12 - Patrón de diseño Builder</titulo>
	 <autor>David Benito Ramírez</autor>
	 <url_public>http://solucionesdbr.es/pages/solucion-12-patron-builder.html</url_public>
	 <fecha>20131205</fecha>		 
	<header>El patrón de diseño Builder te permite encapsular la funcionalidad y propiedades comunes entre diferentes objetos en un proceso de creación común.  Con ello, se obtiene mantenibilidad de los objetos resultantes, creando los contratos de clase para que su uso sea lo más robusto posible.</header>
	<imagen>img/lego_builder_patron.png</imagen>
	 <section>
		<![CDATA[
<p>
 <a href="https://es.wikipedia.org/wiki/Builder_%28patr%C3%B3n_de_dise%C3%B1o%29">Definición de wikipedia:</a> Como Patrón de diseño, el patrón builder (Constructor) es usado para permitir la creación de una variedad de objetos complejos desde un objeto fuente (Producto), el objeto fuente se compone de una variedad de partes que contribuyen individualmente a la creación de cada objeto complejo a través de un conjunto de llamadas a interfaces comunes de la clase Abstract Builder.
</p>
<p>
El patrón Builder se compone de 4 clases:
<ul>
<li>
<strong>Director</strong> : Encargado de realizar el proceso de creación del objeto paso a paso.
</li>
<li>
<strong>AbstractBuilder</strong> (Builder) :  Contrato donde se especifica qué pasos son los del proceso de creación. De forma generalizada.
</li>
<li>
<strong>ConcreteBuilder</strong> : Implementa los pasos de forma individual.
</v>
<li>
<strong>Product</strong> : Objeto final a elaborar.
</li>
</ul>
</p>
<p>
Ejemplo:
El ejemplo es un Builder de pizzas. El añadir nuevas pizzas consistirá en crear un nueva Pizza (Product) y un nuevo PizzaBuilder (ConcreteBuilder). Esta nueva Pizza heredará la plantilla del proceso de creación común a todas las pizzas. 
</p>
<pre class="brush: js;">
 /** "Abstract Builder" */
abstract class PizzaBuilder {
   protected Pizza pizza;

   public Pizza getPizza() { return pizza; }
   public void crearNuevaPizza() { pizza = new Pizza(); }

   public abstract void buildMasa();
   public abstract void buildSalsa();
   public abstract void buildRelleno();
}
La clase AbstractBuilder tiene el contrato que cumplirá al ConcreteBuilder.
/** "ConcreteBuilder" */
class HawaiPizzaBuilder extends PizzaBuilder {
   public void buildMasa()   { pizza.setMasa("suave"); }
   public void buildSalsa()   { pizza.setSalsa("dulce"); }
   public void buildRelleno() { pizza.setRelleno("chorizo+alcachofas"); }
}
/** "ConcreteBuilder" */
class PicantePizzaBuilder extends PizzaBuilder {
   public void buildMasa()   { pizza.setMasa("cocida"); }
   public void buildSalsa()   { pizza.setSalsa("picante"); }
   public void buildRelleno() { pizza.setRelleno("pimienta+salchichón"); }
}

/** "Director" */
class Cocina {
   private PizzaBuilder pizzaBuilder;

   public void setPizzaBuilder(PizzaBuilder pb) { pizzaBuilder = pb; }
   public Pizza getPizza() { return pizzaBuilder.getPizza(); }

   public void construirPizza() {
      pizzaBuilder.crearNuevaPizza();
      pizzaBuilder.buildMasa();
      pizzaBuilder.buildSalsa();
      pizzaBuilder.buildRelleno();
   }
}
</pre>
]]>
	</section> 
	<footer>
	<![CDATA[ 
	]]>
	</footer>
</solucion>

<solucion>
	 <id>13</id>
	 <titulo>Solución 13 - ¿Que es Backbone.js?</titulo>
	 <url_public>http://solucionesdbr.es/pages/solucion-13-que-es-backbone.html</url_public>
	 <autor>David Benito Ramírez</autor>
	 <fecha>20131909</fecha>		 
	<header>Backbone.js es un framework de Javascript que se basa en el patrón de diseño MVC (Model View Controller). Backbone es la solución para tener organizado tu código Javascript. Compatible 100% con Jquery, se aconseja su uso como complemento a Backbone. No obstante, se pueden utilizar otros framework "auxiliares" que no sean Jquery como MooTools.</header>
	<imagen>img/backbone.png</imagen>
	 <section>
		<![CDATA[
<p>
 Gracias a que esta basado en el patrón MVC podrás tener tus funciones y eventos organizadas en clases y funcionando bajo un flujo lógico y estructurado.
El evitar el "Spaguetti code" en Javascript sería suficiente para decantarse por este framework. 
</p>
<p>
Pero backbone va más allá:
<ul>
<li>
- Proporciona una interfaz RESTful por JSON. Con un servicio REST en JSON podrás hacer la comunicación bidireccional con la parte servidor y con tu BBDD en última instancia.
</li>
<li>
- Esta pensando para ser usado como aplicación de una sola página. (Single page application(<a href="http://en.wikipedia.org/wiki/Single-page_application">http://en.wikipedia.org/wiki/Single-page_application</a>)). Dando la posibilidad de tener una sola pagina como aplicativo web y poder añadir un seguimiento web con Google Analitics u otros,  y poder enlazar con redes sociales para compartir tus paginas "virtuales" con Facebook, Twitter, etc.
</li>
<li>
- El framework te da la posibilidad de funcionar con templates HTML que puedes unir al modelo de datos, para facilitar la reutilización de código.
</li>
</ul>
</p>
<p>
La finalidad de Backbone es que la vistas escuchen los cambios en el modelo y actúen en consecuencia.
BackBone implementa cuatro clases:
<ul>
<li>
<strong>Backbone.Model:</strong> Representa el modelo de datos por entidades, contiene la lógica de negocio para la obtención de datos de la BBDD. La comunicación la hace a partir de una interfaz RESTful por JSON, pero es sobrecargable para usar otro sistema. Por ejemplo, este blog tiene implementada una adaptación para que la lectura de datos la haga por XML simples con Jquery AJAX.
</li>
<li>
<strong>Backbone.View:</strong>  Contiene los templates reutilizables o la lógica de la capa de presentación. Se puede asociar a los modelos directamente.
</li>
<li>
<strong>Backbone.Controller</strong> (o Backbone.Router en versiones superiores a la 0.5.0): Mapea las URLs con funciones y los controladores, uniendo interfaz de usuario con el modelo de datos y cerrando el círculo del flujo de información.
</li>
</ul>
</p>
<p>
Existen otros frameworks similares como JSAngular.js desarrollado por Google.
</p>
<p>
Escasea los tutorial en español sobre backbone.js, pero el siguiente palía la falta de estos por su calidad : <a href="http://alfonsomarin.com/tutorial-de-backbone-js">http://alfonsomarin.com/tutorial-de-backbone-js</a>
</p>
<p>
Otros: <a href="http://www.genbetadev.com/desarrollo-web/patron-de-diseno-mvc-del-lado-cliente-con-backbonejs">http://www.genbetadev.com/desarrollo-web/patron-de-diseno-mvc-del-lado-cliente-con-backbonejs</a>
</p>
]]>
	</section> 
	<footer>
	<![CDATA[

	]]>
	</footer>
</solucion>
<solucion>
	 <id>14</id>
	 <titulo>Solución 14 - WP8 - Crear Tile a partir de UserControl</titulo>
	 <autor>David Benito Ramírez</autor>
	 <url_public>http://solucionesdbr.es/pages/solucion-14-wp8-crear-tile-user-control.html</url_public>
	 <fecha>20132511</fecha>		 
	<header>En Windows phone 8 (WP8) tenemos los futuros famosos tiles (baldosas). No dejan de ser los accesos directos a las aplicaciones que pueden contener información de la app a la que pertenecen. No obstante, estamos limitados en la personalización a 3 templates que nos proporcionan desde Microsoft.</header>
	<imagen>img/wp8tiles.png</imagen>
	 <section>
		<![CDATA[
		<p>
			Cada app tiene asociado un tile principal y un tile secundario opcional.
			En WP8 estamos limitados en el desarrollo a tres templates:
		</p>
		<ul>
			<li>
			<strong>Iconic Template</strong> : El más sencillo de todos, consta de una sola imagen de fondo y contenido. No obstante es el más configurable teniendo titulo, subtitulo, e imagen a modo de icono.
			</li>
			<li>
			<strong>Flip Template</strong> : El tile que contiene "contraportada". Cada cierto tiempo se muestra la contraportada. Menos configurable que el Iconic template pero con la opción de doble configuración de contenido (portada y contraportada).</li>
			<li>
			<strong>Cycle Template</strong> : El tile en el cual se configura hasta 9 imagenes de fondo que irán pasando y mostrandose sin posibilidad de personalizar nada más que el titulo.
			</li>
		</ul>
		<p>
			Para ampliar información:  <a href='http://msdn.microsoft.com/en-us/library/windowsphone/develop/hh202948(v=vs.105).aspx'>http://msdn.microsoft.com/en-us/library/windowsphone/develop/hh202948(v=vs.105).aspx</a>
		</p>
		<p>
			Con estos templates predefinidos el desarrollador esta limitado y  deberá adaptar las funcionalidades de los tiles a estos templates.
			Pero existe una solución. Se trataria de crear una imagen en ejecución con el contenido pegado (texto, lineas, dibujos).
			Es decir el contenido textual y la imagen de fondo se fusionarían en una única imagen.
		</p>
		<p>
			Los pasos serían los siguientes:
		</p>
		<ul>
			<li>
				<strong>1.- Crear el User Control</strong>
				<pre class="brush: xml;">
					<UserControl x:Class="CustomTile.CustomTileControl"
						    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
						    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
						    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
						    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
						    mc:Ignorable="d"
						    FontFamily="{StaticResource PhoneFontFamilyNormal}"
						    FontSize="{StaticResource PhoneFontSizeNormal}"
						    Foreground="{StaticResource PhoneForegroundBrush}"
						    d:DesignHeight="336" Width="336">
						    <Grid x:Name="LayoutRoot" Background="{StaticResource PhoneChromeBrush}">
						        <TextBlock HorizontalAlignment="Left" Margin="-2,104,0,0" TextWrapping="Wrap"
						          VerticalAlignment="Top" Height="77" Width="337" FontSize="50" Text="CustomTile"
						          TextAlignment="Center"/>
						        <Canvas HorizontalAlignment="Left" Height="97" VerticalAlignment="Top" Width="89"
						          Background="#FFA00808"/>
						        <Canvas HorizontalAlignment="Left" Height="97" VerticalAlignment="Top" Width="89"
						          Background="#FFF0E507" Margin="247,0,0,0"/>
						        <Canvas HorizontalAlignment="Left" Height="89" VerticalAlignment="Top" Width="88"
						          Background="#FF077CF0" Margin="247,245,0,0"/>
						        <TextBlock x:Name="tbDate" HorizontalAlignment="Left" Margin="0,181,0,0"
						          TextWrapping="Wrap" VerticalAlignment="Top" Width="335" Height="65"
						          TextAlignment="Center"  FontSize="30"/>
						        <Canvas HorizontalAlignment="Left" Height="89" VerticalAlignment="Top" Width="88"
						          Background="#FF44C115" Margin="1,247,0,0"/>
						    </Grid>
					</UserControl>
				</pre>
				<p>
					El resultado visual sería el siguiente:
				</p>
				<p>
					<img align="middle" border="0" height="335" src="img/wp8tiles_1.png" width="335">
				</p>
			</li>
			<li>
				<strong>2.- Convertir el User Control en una imagen</strong>
				<pre class="brush: csharp;">
						var customTile = new CustomTileControl();
						customTile.Measure(new Size(336, 336));
						customTile.Arrange(new Rect(0, 0, 336, 336));
						var bmp = new WriteableBitmap(336, 336);
						bmp.Render(customTile, null);
						bmp.Invalidate();
						const string filename = "/Shared/ShellContent/CustomTile.jpg";
						using (var isf = IsolatedStorageFile.GetUserStoreForApplication())
						{
						  if (!isf.DirectoryExists("/CustomLiveTiles"))
						  {
						          isf.CreateDirectory("/CustomLiveTiles");
						  }
						  using (var stream = isf.OpenFile(filename, System.IO.FileMode.OpenOrCreate))
						  {
						          bmp.SaveJpeg(stream, 336, 366, 0, 100);
						  }
						}
				</pre>
			</li>
				<strong>3.- Crear o Actualizar el tile con la imagen guardada.</strong>
				<pre class="brush: csharp;">
							
					FlipTileData tileData = new FlipTileData
					{
				    //Title = "CustomSecondaryTile",
				    WideBackgroundImage = new Uri("isostore:" + filename, UriKind.Absolute),
				    BackgroundImage = new Uri("isostore:" + filename, UriKind.Absolute),
					};
					string tileUri = string.Concat("/MainPage.xaml?", "");
					ShellTile.Create(new Uri(tileUri, UriKind.Relative), tileData,true);

				</pre>
			<li>
			</li>
		</ul>
		<p>Este link de la comunidad de desarrollo de nokia, donde he extraído la información del articulo, explica detalladamente como hacerlo: </p> 
		<a href='http://developer.nokia.com/Community/Wiki/Custom_Live_Tile_Layout_with_UserControl_as_image_source'>http://developer.nokia.com/Community/Wiki/Custom_Live_Tile_Layout_with_UserControl_as_image_source</a>
]]>
	</section> 
	<footer>
	<![CDATA[
	]]>
	</footer>
</solucion>
<solucion>
	 <id>15</id>
	 <titulo>Solución 15 - Knockout.js y el patrón MVVM</titulo>
	 <autor>David Benito Ramírez</autor>
	 <url_public>http://solucionesdbr.es/pages/solucion-15-knockout-y-patron-mvvm.html</url_public>
	 <fecha>20132711</fecha>		 
	<header>Knockout.js es una de la más utilizadas bibliotecas javascript de los últimos tiempos que se basa en el patrón MVVM (Modelo-Vista-ModeloVista). En este articulo encontraremos la definición del patrón MVVM y dos ejemplos sencillos para entender de forma muy fácil Knockout.js.</header>
	<imagen>img/knockout.png</imagen>
	 <section>
		<![CDATA[
		<p  style="width:244px;height:70px;" >
			<img align="left" border="0" src="img/knockout_2.png" width="244px" height="70px">
		</p>
		<p>
			Página oficial: <a href="http://knockoutjs.com/">http://knockoutjs.com/</a>
		</p>
		<p>
			Para entender Knockout.js y su razón de existir hay que entender primero el patrón MVVM.
		</p>
		<p>
			El <strong>patrón de MVVM</strong> se basa en tener una Vista (capa de presentación), un Modelo (modelo de datos), y un ModeloVista que proporcionará la sincronización entre el Modelo y la Vista.
			Cualquier cambio en el Modelo advierte al ModeloVista que modifica la Vista, y viceversa. Con este flujo, la Vista y el Modelo estarán siempre sincronizados.
			Un elemento importante del patrón es el Binding, que es el encargado de la comunicación bidireccional (sí se quiere). El binding se realiza en propiedades y/o metodos de la VistaModelo con los elementos del DOM. Para tal fin utilizará el patrón observador.
		</p>
		<p style="width:415px;height:303px;">
			<img align="left" border="0" src="img/knockout_3.jpg" width="415px" height="303px">
		</p>
		<p>
			Volviendo a <strong>knockout.js</strong>...
		</p>
		<p>
			Entre las cosas que permite:
		</p>
		<ul>
			<li>
				Realizar Binding Declarativos.
			</li>
			<li>
				Resfresco automático de los elementos de la Vista. Cuando se actualiza el ModeloVista, nuestra Vista se actualiza automáticamente.
			<li>
				Tracking de Dependencias, detecta los cambios realizados en la Vista o en el Modelo y es capaz de propagarlos.
			</li>
			<li>
				Plantillas, permite generar rapidamente plantillas en función de los datos del ModeloVista.
			</li>
		</ul>
		<p>
			Además, es open source (gratis), es compatible con cualquier framework javascript (p.e JQuery), y es liviano (solo 40k minimizado) y da soporte para IE6+, Firefox 2+.Chrome, Opera y Safari (versión móvil y de escritorio) y totalmente documentada.
		</p>
		<p>
			Pongamos un ejemplo a modo de explicación de MVVM y Knockout.js:
		</p>
		<p>
			<pre class="brush: html;">
				&lt;html lang="en"&gt;
				    &lt;head&gt;
				        &lt;meta charset="utf-8" /&gt;
				        &lt;title&gt;&lt;/title&gt;
				        &lt;script type="text/javascript" src="js/knockout-3.0.0.js"&gt;&lt;/script&gt;
				    &lt;/head&gt;
				    &lt;body&gt;
				        &lt;h1&gt;Ejemplo MVVM&lt;/h1&gt;
				        &lt;ul&gt;
				          &lt;li&gt;El nombre es &lt;span  data-bind="text:nombre"&gt;&lt;/span&gt;&lt;/li&gt;
				            &lt;li&gt;El apellido es &lt;span  data-bind="text:apellidos"&gt;&lt;/span&gt;&lt;/li&gt;
				            &lt;li&gt;El edad es &lt;span  data-bind="text:edad"&gt;&lt;/span&gt;&lt;/li&gt;
				        &lt;/ul&gt;
				          &lt;script type="text/javascript"&gt;
				            var PersonaViewModel = {
				                nombre: "Juan Pablo",
				                apellidos: "Pérez Nuñez",
				                edad: 1
				                };
				            ko.applyBindings(PersonaViewModel);
				        &lt;/script&gt;
				    &lt;/body&gt;
				&lt;/html&gt;
			</pre>
		</p>
		<p>
			Analicemos el código:
		</p>
		<p>
			<ul>
				<li>
					Tenemos en el código el enlace al javascript con la biblioteca knockout-3.0.0.js.
				</li>
				<li>
					Un bloque de código javascript con la creación de una VistaModelo de knockout que, además, se le pasa un Modelo con tres atributos (el Modelo se crea en ejecución y se asigna al ModeloVista).
				</li>
				<li>
					 Tres controles <strong>span</strong> tienen el atributo <strong>data-bind</strong> (aceptado en HTML5) que contiene el nombre de la propiedades del modelo.   Podemos ver que la Vista sería la propia página HTML
				</li>
				<li>
					Se aprecia que se distribuyen los datos del Modelo enlazando propiedades en los controles con el atributo <strong>data-bind</strong>. Y se "confirma" estos enlaces gracias al método <strong>applyBindings()</strong>.
				</li>
			</ul>
		</p>
		<p>
			El resultado visual seria el siguiente:
		</p>
		<p  style="width:351px;height:215px;">
			<img align="left" border="0" src="img/knockout_4.png" width="351px" height="215px">
		</p>
		<p>
			El anterior ejemplo sería un binding sencillo, vamos a ampliar el ejemplo para convertirlo en un binding bidireccional:
		</p>
		<p>
			<ul>
				<li>
					Incluimos un <strong>input text</strong>, que al enlazarlo con el ViewModel, cualquier cambio que se haga se verá reflejado por propagación en la Vista y en el Modelo.
				</li>
				<li>
					Para ello modificaremos el ViewModel, la propiedad 'edad' para que sea <strong>observable</strong>, dotando de bidireccionalidad el control que se asocie a esta propiedad, en este caso el nuevo input text.
				</li>
			</ul>
		</p>
		<p>
			<pre class="brush: html;">
				&lt;html lang="en"&gt;
				    &lt;head&gt;
				        &lt;meta charset="utf-8" /&gt;
				        &lt;title&gt;&lt;/title&gt;
				            &lt;script type="text/javascript" src="js/knockout-2.1.0.js"&gt;&lt;/script&gt;
				    &lt;/head&gt;
				    &lt;body&gt;
				        &lt;h1&gt;Ejemplo MVVM&lt;/h1&gt;
				        &lt;ul&gt;
				            &lt;li&gt;El nombre es &lt;span  data-bind="text:nombre"&gt;&lt;/span&gt;&lt;/li&gt;
				            &lt;li&gt;El apellido es &lt;span  data-bind="text:apellidos"&gt;&lt;/span&gt;&lt;/li&gt;
				            &lt;li&gt;El edad es &lt;span  data-bind="text:edad"&gt;&lt;/span&gt;&lt;/li&gt;
				        &lt;/ul&gt;
				      &lt;input  data-bind="value:edad" type="number"&gt;
				        &lt;script type="text/javascript"&gt;
				            var PersonaViewModel = {
				                nombre: "Juan Pablo",
				                apellidos: "Pérez Nuñez",
				                edad: ko.observable(1)
				                };
				            ko.applyBindings(PersonaViewModel);
				        &lt;/script&gt;
				    &lt;/body&gt;
				&lt;/html&gt;
			</pre>
		</p>
		<p style="width:365px;height:240px;">
			<img align="left" border="0" src="img/knockout_5.png" width="365px" height="240px">
		</p>
		<p>
			Cada vez que modifiquemos el input text se modificará el span que contiene el valor de la edad.
		</p>
]]>
	</section> 
	<footer>
	<![CDATA[
		<p>
			El ejemplo en ejecución se encuentra en: <a href="http://solucionesdbr.es/examples/knockout_sample1.html">http://solucionesdbr.es/examples/knockout_sample1.html</a>
		</p>
		<p>
			Fuente:
		</p>
		<p>
			<a href="http://maromasdigitales.net/2010/05/patron-mvvm-explicado/">http://maromasdigitales.net/2010/05/patron-mvvm-explicado/</a>
		</p>
		<p>
			<a href="http://geeks.ms/blogs/gperez/archive/2012/08/13/tutorial-comenzado-con-mvvm-y-knockout-js.aspx">http://geeks.ms/blogs/gperez/archive/2012/08/13/tutorial-comenzado-con-mvvm-y-knockout-js.aspx</a>
		</p>
		<p>
			<a href="http://knockoutjs.com/documentation/template-binding.html">http://knockoutjs.com/documentation/template-binding.html</a>
		</p>
		<p>
			<a href="http://knockoutjs.com/documentation/observables.html#mvvm_and_view_models">http://knockoutjs.com/documentation/observables.html#mvvm_and_view_models</a>
		</p>
	]]>
	</footer>
</solucion>
</xml>
